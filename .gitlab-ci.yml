stages:
  - build
  - deploy

docker-build:
  # Use the official docker image.
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""


  stage: build
  services:
    - docker:dind
  before_script:
    - apk add --update py-pip npm
    - pip install awscli --break-system-packages
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/g7c8o4c7
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag="latest"
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag="$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build . --network host --tag public.ecr.aws/g7c8o4c7/front-service:${tag} --build-arg COMMIT_SHA=${CI_COMMIT_SHA}
    - docker push public.ecr.aws/g7c8o4c7/front-service:${tag}
  # Run this job in a branch where a Dockerfile exists
  only:
    - merge_requests
    - web

docker-build-for-tag:
  # Use the official docker image.
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

  stage: build
  services:
    - docker:dind
  before_script:
    - apk add --update py-pip npm unzip
    - pip install awscli --break-system-packages
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/g7c8o4c7
    - npm install -g @newrelic/publish-sourcemap
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      tag=$(echo $CI_COMMIT_TAG | sed "s/\./-/g")
    - echo "docker build . --network host --tag public.ecr.aws/g7c8o4c7/front-service:${tag} --build-arg COMMIT_SHA=${CI_COMMIT_SHA} --build-arg RELEASE_TAG=${CI_COMMIT_TAG}"
    - docker build . --network host --tag public.ecr.aws/g7c8o4c7/front-service:${tag} --build-arg COMMIT_SHA=${CI_COMMIT_SHA} --build-arg RELEASE_TAG=${CI_COMMIT_TAG}
    - docker push public.ecr.aws/g7c8o4c7/front-service:${tag}
    - docker run --rm -d --name work_${tag} public.ecr.aws/g7c8o4c7/front-service:${tag}
    - mkdir work
    - cd work
    - docker cp -a work_${tag}:/app/frontservice.jar .
    - docker rm -f work_${tag}
    - unzip frontservice.jar
    - cd BOOT-INF/classes/static/js
    - ls *.js | xargs -n 1 -I{} publish-sourcemap {}.map https://front.demo.learn.nrkk.technology/static/js/{} --apiKey=${NEW_RELIC_USER_KEY} --applicationId=1588977533 --repoUrl=https://gitlab.sockshop.nrkk.technology/GamedayBase/front-service --buildCommit=${CI_COMMIT_SHA} --releaseId=${tag} --releaseName=${tag}
  # Run this job in a branch where a Dockerfile exists
  only:
    - tags
  except:
    - schedules

deploy:
  stage: deploy
  image: dtzar/helm-kubectl:3.8.2
  before_script:
    - apk add --update py-pip
    - pip install awscli
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag="latest"
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=`echo $CI_COMMIT_REF_SLUG | sed "s/\//-/g"`
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - sed -i "s/front-service:latest/front-service:${tag}/g" deployment.yaml
    - sed -i "s/YOUR_NR_LICENSE_KEY/${NEW_RELIC_LICENSE_KEY}/g" deployment.yaml
    - sed -i "s/YOUR_TRACE_OBSERVER_HOST/${NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST}/g" deployment.yaml
    - sed -ie "s/YOUR_AWS_ACCESS_KEY_ID/${AWS_ACCESS_KEY_ID}/g" deployment.yaml
    - sed -ie "s|YOUR_AWS_SECRET_ACCESS_KEY|${AWS_SECRET_ACCESS_KEY}|g" deployment.yaml
    - mkdir -p ~/.kube; cat ${KUBE_CONFIG} > /root/.kube/config
    - kubectl apply -f deployment.yaml
  only:
    - tags
    # - merge_requests
    #- web

deploy-for-schedule:
  stage: deploy
  image: dtzar/helm-kubectl:3.8.2
  before_script:
    - apk add --update py-pip
    - pip install awscli --break-system-packages
  script:
    - |
      tag_raw=$(git describe --tags)
      tag=$(echo ${tag_raw}| sed "s/\./-/g")
      echo $tag
      description=$(echo ${CI_COMMIT_MESSAGE}|sed "s|/|_|g")
      echo ${description}
      hash=${CI_COMMIT_SHA}
      echo ${hash}
    - sed -i "s/front-service:latest/front-service:${tag}/g" deployment.yaml
    - sed -i "s/YOUR_NR_LICENSE_KEY/${NEW_RELIC_LICENSE_KEY}/g" deployment.yaml
    - sed -i "s/YOUR_TRACE_OBSERVER_HOST/${NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST}/g" deployment.yaml
    - mkdir -p ~/.kube; cat ${KUBE_CONFIG} > /root/.kube/config
    - kubectl apply -f deployment.yaml
    - echo "s/DESCRIPTION/${description}/;s/TAG/${tag_raw}/;s/HASH/${hash}/;"
    - sed -i "s/DESCRIPTION/${description}/;s/TAG/${tag_raw}/;s/HASH/${hash}/;" scripts/change_tracking.query
    - ./scripts/change_tracking.sh ${NEW_RELIC_USER_KEY}

  only:
    - schedules