{"version":3,"file":"static/js/async-api.e311d257.chunk.js","mappings":"6FAsBO,SAASA,EAASC,GACvB,IAAIC,EAAQC,KACZ,IAAIC,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,IAC9EG,EAAUH,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAAC,EACnF,MAAMI,GAAiB,OAAPD,QAAO,IAAPA,OAAO,EAAPA,EAASC,WAAW,EACpC,IAAIC,EACJ,OAAO,WACL,IAAK,IAAIC,EAAON,UAAUC,OAAQM,EAAO,IAAIC,MAAMF,GAAOG,EAAO,EAAGA,EAAOH,EAAMG,IAC/EF,EAAKE,GAAQT,UAAUS,GAErBL,QAAqBF,IAAVG,IACbT,EAAKc,MAAMb,EAAOU,GAClBF,EAAQM,YAAW,KACjBN,EAAQO,aAAaP,EAAM,GAC1BN,IAEAK,IACHQ,aAAaP,GACbA,EAAQM,YAAW,KACjBf,EAAKc,MAAMb,EAAOU,EAAK,GACtBR,GAEP,CACF,CAUO,SAASc,EAAOjB,GACrB,IAAIkB,EAAShB,KACb,IAAIiB,GAAS,EACb,OAAO,WACL,IAAKA,EAAQ,CACXA,GAAS,EACT,IAAK,IAAIC,EAAQhB,UAAUC,OAAQM,EAAO,IAAIC,MAAMQ,GAAQC,EAAQ,EAAGA,EAAQD,EAAOC,IACpFV,EAAKU,GAASjB,UAAUiB,GAE1BrB,EAAKc,MAAMI,EAAQP,EACrB,CACF,CACF,C,gJC5DO,SAASW,EAAOC,GACrB,IAAIC,EAAaC,EAAAA,GAAGC,IAAIH,GACpBI,EAAM,CACRC,UAAUX,EAAAA,EAAAA,IAeZ,SAAkBY,EAAGC,GACnB,IAAIC,EAAOD,EAAeA,GAAeE,EAAAA,EAAAA,IAAWT,GAAiBU,OAASJ,GAC9EK,EAAAA,EAAAA,GAAOC,EAAAA,GAAuB,CAAC,WAAY,CACzCJ,cACEzB,EAAW8B,EAAAA,EAAcC,QAASb,GACtCc,EAAWT,EAAG,CACZU,KAAM,WACNC,MAAOT,GAAOC,EAAAA,EAAAA,IAAWT,GAAiBU,OAC1CQ,OAAQ,QAEVP,EAAAA,EAAAA,GAAO,oBAAqB,CAACH,EAAM,iBAAazB,EAAW8B,EAAAA,EAAcM,WAAYlB,EACvF,IAzBEmB,gBAqCF,SAAyBd,EAAGe,IAC1BZ,EAAAA,EAAAA,IAAWT,GAAiBsB,QAAUD,CACxC,EAtCEN,aACAQ,WAuCF,SAAoBjB,EAAGU,EAAMQ,GAC3B,KAAMC,EAAe,GAAI,QACzBhB,EAAAA,EAAAA,IAAWT,GAAiB0B,WAAWV,EAAKW,OAAO,OAAS,GAAKH,GAAIG,OAAO,IAC9E,GAlBA,SAASZ,EAAWT,EAAGsB,GACrB,GAAMA,GAAsB,kBAARA,GAAoBA,EAAIZ,MAAQY,EAAIX,MAAxD,CACA,IAAIY,EAAS,CACXC,EAAGF,EAAIZ,KACPe,EAAGH,EAAIX,OAAQR,EAAAA,EAAAA,IAAWT,GAAiBU,OAC3CsB,GAAIJ,EAAIK,KAAOL,EAAIX,QAASR,EAAAA,EAAAA,IAAWT,GAAiBU,OACxDwB,EAAGN,EAAIV,QAAU,GACjBZ,EAAG,QAELK,EAAAA,EAAAA,GAAO,SAAU,CAACkB,QAAS9C,EAAW8B,EAAAA,EAAcsB,aAAclC,EARI,CASxE,CA9BAmC,OAAOC,QAAQjC,GAAKkC,SAAQC,IAC1B,IAAKC,EAAQC,GAAUF,EACvB,OAAOG,EAAAA,EAAAA,GAAgB,OAASF,EAAQC,EAAQ,MAAOxC,EAAW,IAgCpE,IAAIwB,EAAe,CAKrB,C","sources":["../node_modules/@newrelic/browser-agent/dist/esm/common/util/invoke.js","../node_modules/@newrelic/browser-agent/dist/esm/loaders/api/apiAsync.js"],"sourcesContent":["/**\n * Reduce the invocation of the supplied function so that it is only invoked\n * once within a given timeout.\n *\n * If `wait` is `0`, the function will be invoked during the next tick.\n * If `options.leading` is false or not provided, the function will be invoked\n * N milliseconds after the last invocation of the returned function where\n * N is the `timeout` value.\n * If `options.leading` is true, the function will be invoked immediately upon\n * the first invocation of the returned function and not again for N milliseconds\n * where N is the `timeout` value.\n * @param {function} func Function whose invocation should be limited so it is only invoked\n * once within a given timeout period.\n * @param {number} timeout Time in milliseconds that the function should only be invoked\n * once within.\n * @param {object} options Debounce options\n * @param {boolean} options.leading Forces the function to be invoked on the first\n * invocation of the returned function instead of N milliseconds after the last\n * invocation.\n * @returns {function} A wrapping function that will ensure the provided function\n * is invoked only once within the given timeout.\n */\nexport function debounce(func) {\n  var _this = this;\n  let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const leading = options?.leading || false;\n  let timer;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (leading && timer === undefined) {\n      func.apply(_this, args);\n      timer = setTimeout(() => {\n        timer = clearTimeout(timer);\n      }, timeout);\n    }\n    if (!leading) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        func.apply(_this, args);\n      }, timeout);\n    }\n  };\n}\n\n/**\n * Reduce the invocation of the supplied function so that it is only invoked\n * once.\n * @param {function} func Function whose invocation should be limited so it is only invoked\n * once.\n * @returns {function} A wrapping function that will ensure the provided function\n * is invoked only once.\n */\nexport function single(func) {\n  var _this2 = this;\n  let called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      func.apply(_this2, args);\n    }\n  };\n}","import { FEATURE_NAMES } from '../features/features';\nimport { getRuntime } from '../../common/config/config';\nimport { ee } from '../../common/event-emitter/contextual-ee';\nimport { handle } from '../../common/event-emitter/handle';\nimport { registerHandler } from '../../common/event-emitter/register-handler';\nimport { single } from '../../common/util/invoke';\nimport { CUSTOM_METRIC_CHANNEL } from '../../features/metrics/constants';\nexport function setAPI(agentIdentifier) {\n  var instanceEE = ee.get(agentIdentifier);\n  var api = {\n    finished: single(finished),\n    setErrorHandler,\n    addToTrace,\n    addRelease\n  };\n\n  // Hook all of the api functions up to the queues/stubs created in loader/api.js\n  Object.entries(api).forEach(_ref => {\n    let [fnName, fnCall] = _ref;\n    return registerHandler('api-' + fnName, fnCall, 'api', instanceEE);\n  });\n\n  // All API functions get passed the time they were called as their\n  // first parameter. These functions can be called asynchronously.\n\n  function finished(t, providedTime) {\n    var time = providedTime ? providedTime - getRuntime(agentIdentifier).offset : t;\n    handle(CUSTOM_METRIC_CHANNEL, ['finished', {\n      time\n    }], undefined, FEATURE_NAMES.metrics, instanceEE);\n    addToTrace(t, {\n      name: 'finished',\n      start: time + getRuntime(agentIdentifier).offset,\n      origin: 'nr'\n    });\n    handle('api-addPageAction', [time, 'finished'], undefined, FEATURE_NAMES.pageAction, instanceEE);\n  }\n  function addToTrace(t, evt) {\n    if (!(evt && typeof evt === 'object' && evt.name && evt.start)) return;\n    var report = {\n      n: evt.name,\n      s: evt.start - getRuntime(agentIdentifier).offset,\n      e: (evt.end || evt.start) - getRuntime(agentIdentifier).offset,\n      o: evt.origin || '',\n      t: 'api'\n    };\n    handle('bstApi', [report], undefined, FEATURE_NAMES.sessionTrace, instanceEE);\n  }\n  function setErrorHandler(t, handler) {\n    getRuntime(agentIdentifier).onerror = handler;\n  }\n  var releaseCount = 0;\n  function addRelease(t, name, id) {\n    if (++releaseCount > 10) return;\n    getRuntime(agentIdentifier).releaseIds[name.slice(-200)] = ('' + id).slice(-200);\n  }\n}"],"names":["debounce","func","_this","this","timeout","arguments","length","undefined","options","leading","timer","_len","args","Array","_key","apply","setTimeout","clearTimeout","single","_this2","called","_len2","_key2","setAPI","agentIdentifier","instanceEE","ee","get","api","finished","t","providedTime","time","getRuntime","offset","handle","CUSTOM_METRIC_CHANNEL","FEATURE_NAMES","metrics","addToTrace","name","start","origin","pageAction","setErrorHandler","handler","onerror","addRelease","id","releaseCount","releaseIds","slice","evt","report","n","s","e","end","o","sessionTrace","Object","entries","forEach","_ref","fnName","fnCall","registerHandler"],"sourceRoot":""}