{"version":3,"file":"static/js/ajax-aggregate.b51e41f2.chunk.js","mappings":"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","sources":["../node_modules/@newrelic/browser-agent/dist/esm/common/deny-list/deny-list.js","../node_modules/@newrelic/browser-agent/dist/esm/common/harvest/harvest-scheduler.js","../node_modules/@newrelic/browser-agent/dist/esm/common/serialize/bel-serializer.js","../node_modules/@newrelic/browser-agent/dist/esm/common/unload/eol.js","../node_modules/@newrelic/browser-agent/dist/esm/features/ajax/aggregate/gql.js","../node_modules/@newrelic/browser-agent/dist/esm/common/util/type-check.js","../node_modules/@newrelic/browser-agent/dist/esm/features/ajax/aggregate/index.js"],"sourcesContent":["/** An array of filter objects {hostname, pathname} for identifying XHR events to be excluded from collection.\n * @see {@link https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/filter-ajax-request-events/ Filter AjaxRequest events}\n * @type {Array.<{hostname: string, pathname: string}>}\n */\nvar denyList = [];\n\n/**\n * Evaluates whether an XHR event should be included for collection based on the {@link denyList|AjaxRequest deny list}.\n * @param {Object} params - object with properties of the XHR event\n * @returns {boolean} `true` if request does not match any entries of {@link denyList|deny list}; else `false`\n */\nexport function shouldCollectEvent(params) {\n  if (denyList.length === 0) {\n    return true;\n  }\n\n  // XHR requests with an undefined hostname (e.g., data URLs) should not be collected.\n  if (params.hostname === undefined) {\n    return false;\n  }\n  for (var i = 0; i < denyList.length; i++) {\n    var parsed = denyList[i];\n    if (parsed.hostname === '*') {\n      return false;\n    }\n    if (domainMatchesPattern(parsed.hostname, params.hostname) && comparePath(parsed.pathname, params.pathname)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initializes the {@link denyList|XHR deny list} by extracting hostname and pathname from an array of filter strings.\n * @param {string[]} denyListConfig - array of URL filters to identify XHR requests to be excluded from collection\n */\nexport function setDenyList(denyListConfig) {\n  denyList = [];\n  if (!denyListConfig || !denyListConfig.length) {\n    return;\n  }\n  for (var i = 0; i < denyListConfig.length; i++) {\n    let url = denyListConfig[i];\n    if (!url) continue; // ignore bad values like undefined or empty strings\n\n    if (url.indexOf('http://') === 0) {\n      url = url.substring(7);\n    } else if (url.indexOf('https://') === 0) {\n      url = url.substring(8);\n    }\n    const firstSlash = url.indexOf('/');\n    let host, pathname;\n    if (firstSlash > 0) {\n      host = url.substring(0, firstSlash);\n      pathname = url.substring(firstSlash);\n    } else {\n      host = url;\n      pathname = '';\n    }\n    let [hostname] = host.split(':');\n    denyList.push({\n      hostname,\n      pathname\n    });\n  }\n}\n/**\n * Returns true if the right side of `domain` (end of string) matches `pattern`.\n * @param {string} pattern - a string to be matched against the end of `domain` string\n * @param {string} domain - a domain string with no protocol or path (e.g., app1.example.com)\n * @returns {boolean} `true` if domain matches pattern; else `false`\n */\nfunction domainMatchesPattern(pattern, domain) {\n  if (pattern.length > domain.length) {\n    return false;\n  }\n  return domain.indexOf(pattern) === domain.length - pattern.length;\n}\n\n/**\n * Returns true if a URL path matches a pattern string, disregarding leading slashes.\n * @param {string} pattern - a string to compare with path (e.g., api/v1)\n * @param {string} path - a string representing a URL path (e.g., /api/v1)\n * @returns {boolean} `true` if path and pattern are an exact string match (except for leading slashes); else `false`\n */\nfunction comparePath(pattern, path) {\n  if (pattern.indexOf('/') === 0) {\n    pattern = pattern.substring(1);\n  }\n  if (path.indexOf('/') === 0) {\n    path = path.substring(1);\n  }\n\n  // No path in pattern means match all paths.\n  if (pattern === '') {\n    return true;\n  }\n  return pattern === path;\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as submitData from '../util/submit-data';\nimport { SharedContext } from '../context/shared-context';\nimport { Harvest } from './harvest';\nimport { subscribeToEOL } from '../unload/eol';\nimport { SESSION_EVENTS } from '../session/constants';\n\n/**\n * Periodically invokes harvest calls and handles retries\n */\nexport class HarvestScheduler extends SharedContext {\n  /**\n     * Create a HarvestScheduler\n     * @param {string} endpoint - The base BAM endpoint name -- ex. 'events'\n     * @param {object} opts - The options used to configure the HarvestScheduler\n     * @param {Function} opts.onFinished - The callback to be fired when a harvest has finished\n     * @param {Function} opts.getPayload - A callback which can be triggered to return a payload for harvesting\n     * @param {number} opts.retryDelay - The number of seconds to wait before retrying after a network failure\n     * @param {boolean} opts.raw - Use a prefabricated payload shape as the harvest payload without the need for formatting\n     * @param {string} opts.customUrl - A custom url that falls outside of the shape of the standard BAM harvester url pattern.  Will use directly instead of concatenating various pieces\n     * @param {*} parent - The parent object, whose state can be passed into SharedContext\n     */\n  constructor(endpoint, opts, parent) {\n    super(parent); // gets any allowed properties from the parent and stores them in `sharedContext`\n    this.endpoint = endpoint;\n    this.opts = opts || {};\n    this.started = false;\n    this.timeoutHandle = null;\n    this.aborted = false; // this controls the per-interval and final harvests for the scheduler (currently per feature specific!)\n\n    this.harvest = new Harvest(this.sharedContext);\n\n    // unload if EOL mechanism fires\n    subscribeToEOL(this.unload.bind(this));\n\n    /* Flush all buffered data if session resets and give up retries. This should be synchronous to ensure that the correct `session` value is sent.\n      Since session-reset generates a new session ID and the ID is grabbed at send-time, any delays or retries would cause the payload to be sent under\n      the wrong session ID. */\n    this.sharedContext?.ee.on(SESSION_EVENTS.RESET, () => this.runHarvest({\n      forceNoRetry: true\n    }));\n  }\n\n  /**\n   * This function is only meant for the last outgoing harvest cycle of a page. It trickles down to using sendBeacon, which should not be used\n   * to send payloads while the page is still active, due to limitations on how much data can be buffered in the API at any one time.\n   */\n  unload() {\n    if (this.aborted) return;\n    // If opts.onUnload is defined, these are special actions to execute before attempting to send the final payload.\n    if (this.opts.onUnload) this.opts.onUnload();\n    this.runHarvest({\n      unload: true\n    });\n  }\n  startTimer(interval, initialDelay) {\n    this.interval = interval;\n    this.started = true;\n    this.scheduleHarvest(initialDelay != null ? initialDelay : this.interval);\n  }\n  stopTimer() {\n    let permanently = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.aborted = permanently; // stopping permanently is same as aborting, but this function also cleans up the setTimeout loop\n    this.started = false;\n    if (this.timeoutHandle) {\n      clearTimeout(this.timeoutHandle);\n    }\n  }\n  scheduleHarvest(delay, opts) {\n    if (this.timeoutHandle) return;\n    if (delay == null) {\n      delay = this.interval;\n    }\n    this.timeoutHandle = setTimeout(() => {\n      this.timeoutHandle = null;\n      this.runHarvest(opts);\n    }, delay * 1000);\n  }\n  runHarvest(opts) {\n    if (this.aborted) return;\n\n    /**\n     * This is executed immediately after harvest sends the data via XHR, or if there's nothing to send. Note that this excludes on unloading / sendBeacon.\n     * @param {Object} result\n     */\n    const cbRanAfterSend = result => {\n      if (opts?.forceNoRetry) result.retry = false; // discard unsent data rather than re-queuing for next harvest attempt\n      this.onHarvestFinished(opts, result);\n    };\n    let harvests = [];\n    let submitMethod;\n    let payload;\n    if (this.opts.getPayload) {\n      // Ajax & PVT & SR features provide a callback function to get data for harvesting\n      submitMethod = submitData.getSubmitMethod({\n        isFinalHarvest: opts?.unload\n      });\n      if (!submitMethod) return false;\n      const retry = !opts?.unload && submitMethod === submitData.xhr;\n      payload = this.opts.getPayload({\n        retry\n      });\n      if (!payload) {\n        if (this.started) {\n          this.scheduleHarvest();\n        }\n        return;\n      }\n      payload = Object.prototype.toString.call(payload) === '[object Array]' ? payload : [payload];\n      harvests.push(...payload);\n    }\n\n    /** sendX is used for features that do not supply a preformatted payload via \"getPayload\" */\n    let send = args => this.harvest.sendX(args);\n    if (harvests.length) {\n      /** _send is the underlying method for sending in the harvest, if sending raw we can bypass the other helpers completely which format the payloads */\n      if (this.opts.raw) send = args => this.harvest._send(args);\n      /** send is used to formated the payloads from \"getPayload\" and obfuscate before sending */else send = args => this.harvest.send(args);\n    } else {\n      // force it to run at least once in sendX mode\n      harvests.push(undefined);\n    }\n    harvests.forEach(payload => {\n      send({\n        endpoint: this.endpoint,\n        payload,\n        opts,\n        submitMethod,\n        cbFinished: cbRanAfterSend,\n        customUrl: this.opts.customUrl,\n        raw: this.opts.raw\n      });\n    });\n    if (this.started) {\n      this.scheduleHarvest();\n    }\n  }\n  onHarvestFinished(opts, result) {\n    if (this.opts.onFinished) {\n      this.opts.onFinished(result);\n    }\n    if (result.sent && result.retry) {\n      const delay = result.delay || this.opts.retryDelay;\n      // reschedule next harvest if should be delayed longer\n      if (this.started && delay) {\n        clearTimeout(this.timeoutHandle);\n        this.timeoutHandle = null;\n        this.scheduleHarvest(delay, opts);\n      } else if (!this.started && delay) {\n        // if not running on a timer, schedule a single retry\n        this.scheduleHarvest(delay, opts);\n      }\n    }\n  }\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { mapOwn } from '../util/map-own';\nimport { stringify } from '../util/stringify';\nimport { Obfuscator } from '../util/obfuscate';\nvar hasOwnProp = Object.prototype.hasOwnProperty;\nvar MAX_ATTRIBUTES = 64;\nexport function nullable(val, fn, comma) {\n  return val || val === 0 || val === '' ? fn(val) + (comma ? ',' : '') : '!';\n}\nexport function numeric(n, noDefault) {\n  if (noDefault) {\n    return Math.floor(n).toString(36);\n  }\n  return n === undefined || n === 0 ? '' : Math.floor(n).toString(36);\n}\nexport function getAddStringContext(agentIdentifier) {\n  // eslint-disable-next-line\n  var stringTable = Object.hasOwnProperty('create') ? Object.create(null) : {};\n  var stringTableIdx = 0;\n  return addString;\n  function addString(str) {\n    if (typeof str === 'undefined' || str === '') return '';\n    var obfuscator = new Obfuscator({\n      agentIdentifier\n    });\n    str = String(str);\n    if (obfuscator.shouldObfuscate()) str = obfuscator.obfuscateString(str);\n    if (hasOwnProp.call(stringTable, str)) {\n      return numeric(stringTable[str], true);\n    } else {\n      stringTable[str] = stringTableIdx++;\n      return quoteString(str);\n    }\n  }\n}\nexport function addCustomAttributes(attrs, addString) {\n  var attrParts = [];\n  mapOwn(attrs, function (key, val) {\n    if (attrParts.length >= MAX_ATTRIBUTES) return;\n    var type = 5;\n    var serializedValue;\n    // add key to string table first\n    key = addString(key);\n    switch (typeof val) {\n      case 'object':\n        if (val) {\n          // serialize objects to strings\n          serializedValue = addString(stringify(val));\n        } else {\n          // null attribute type\n          type = 9;\n        }\n        break;\n      case 'number':\n        type = 6;\n        // make sure numbers contain a `.` so they are parsed as doubles\n        serializedValue = val % 1 ? val : val + '.';\n        break;\n      case 'boolean':\n        type = val ? 7 : 8;\n        break;\n      case 'undefined':\n        // we treat undefined as a null attribute (since dirac does not have a concept of undefined)\n        type = 9;\n        break;\n      default:\n        serializedValue = addString(val);\n    }\n    attrParts.push([type, key + (serializedValue ? ',' + serializedValue : '')]);\n  });\n  return attrParts;\n}\nvar escapable = /([,\\\\;])/g;\nfunction quoteString(str) {\n  return \"'\" + str.replace(escapable, '\\\\$1');\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { windowAddEventListener } from '../event-listener/event-listener-opts';\nimport { globalScope, isWorkerScope, isBrowserScope } from '../constants/runtime';\nimport { subscribeToVisibilityChange } from '../window/page-visibility';\nif (isWorkerScope) {\n  globalScope.cleanupTasks = []; // create new list on WorkerGlobalScope to track funcs to run before exiting thread\n\n  const origClose = globalScope.close;\n  globalScope.close = () => {\n    // on worker's EoL signal, execute all \"listeners\", e.g. final harvests\n    for (let task of globalScope.cleanupTasks) {\n      task();\n    }\n    origClose();\n  };\n}\n\n/**\n * Subscribes a provided callback to the time/event when the agent should treat it as end-of-life.\n * This is used, for example, to submit a final harvest and send all remaining data on best-effort.\n * @param {function} cb - func to run before or during the last reliable event or time of an env's life span\n */\nexport function subscribeToEOL(cb) {\n  if (isBrowserScope) {\n    subscribeToVisibilityChange(cb, true); // when user switches tab or hides window, esp. mobile scenario\n    windowAddEventListener('pagehide', cb); // when user navigates away, and because safari iOS v14.4- doesn't fully support vis change\n    // --this ought to be removed once support for version below 14.5 phases out\n  } else if (isWorkerScope) {\n    globalScope.cleanupTasks.push(cb); // close() should run these tasks before quitting thread\n  }\n  // By default (for other env), this fn has no effect.\n}","import { isPureObject } from '../../../common/util/type-check';\n\n/**\n * @typedef {object} GQLMetadata\n * @property {string} operationName Name of the operation\n * @property {string} operationType Type of the operation\n * @property {string} operationFramework Framework responsible for the operation\n */\n\n/**\n * Parses and returns the graphql metadata from a network request. If the network\n * request is not a graphql call, undefined will be returned.\n * @param {object|string} body Ajax request body\n * @param {string} query Ajax request query param string\n * @returns {GQLMetadata | undefined}\n */\nexport function parseGQL() {\n  let {\n    body,\n    query\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!body && !query) return;\n  try {\n    const gqlBody = parseBatchGQL(parseGQLContents(body));\n    if (gqlBody) return gqlBody;\n    const gqlQuery = parseSingleGQL(parseGQLQueryString(query));\n    if (gqlQuery) return gqlQuery;\n  } catch (err) {\n    // parsing failed, return undefined\n  }\n}\n\n/**\n * @param {string|Object} gql The GraphQL object body sent to a GQL server\n * @returns {GQLMetadata}\n */\nfunction parseSingleGQL(contents) {\n  if (typeof contents !== 'object' || !contents.query || typeof contents.query !== 'string') return;\n\n  /** parses gql query string and returns [fullmatch, type match, name match] */\n  const matches = contents.query.trim().match(/^(query|mutation|subscription)\\s?(\\w*)/);\n  const operationType = matches?.[1];\n  if (!operationType) return;\n  const operationName = contents.operationName || matches?.[2] || 'Anonymous';\n  return {\n    operationName,\n    // the operation name of the indiv query\n    operationType,\n    // query, mutation, or subscription,\n    operationFramework: 'GraphQL'\n  };\n}\nfunction parseBatchGQL(contents) {\n  if (!contents) return;\n  if (!Array.isArray(contents)) contents = [contents];\n  const opNames = [];\n  const opTypes = [];\n  for (let content of contents) {\n    const operation = parseSingleGQL(content);\n    if (!operation) continue;\n    opNames.push(operation.operationName);\n    opTypes.push(operation.operationType);\n  }\n  if (!opTypes.length) return;\n  return {\n    operationName: opNames.join(','),\n    // the operation name of the indiv query -- joined by ',' for batched results\n    operationType: opTypes.join(','),\n    // query, mutation, or subscription -- joined by ',' for batched results\n    operationFramework: 'GraphQL'\n  };\n}\nfunction parseGQLContents(gqlContents) {\n  let contents;\n  if (!gqlContents || typeof gqlContents !== 'string' && typeof gqlContents !== 'object') return;else if (typeof gqlContents === 'string') contents = JSON.parse(gqlContents);else contents = gqlContents;\n  if (!isPureObject(contents) && !Array.isArray(contents)) return;\n  let isValid = false;\n  if (Array.isArray(contents)) isValid = contents.some(x => validateGQLObject(x));else isValid = validateGQLObject(contents);\n  if (!isValid) return;\n  return contents;\n}\nfunction parseGQLQueryString(gqlQueryString) {\n  if (!gqlQueryString || typeof gqlQueryString !== 'string') return;\n  const params = new URLSearchParams(gqlQueryString);\n  return parseGQLContents(Object.fromEntries(params));\n}\nfunction validateGQLObject(obj) {\n  return !(typeof obj !== 'object' || !obj.query || typeof obj.query !== 'string');\n}","/**\n * Tests a passed object to see if it is a pure object or not. All non-primatives in JS\n * are technically objects and would pass a `typeof` check.\n * @param {*} obj Input object to be tested\n**/\nexport function isPureObject(obj) {\n  return obj?.constructor === {}.constructor;\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { registerHandler as register } from '../../../common/event-emitter/register-handler';\nimport { stringify } from '../../../common/util/stringify';\nimport { nullable, numeric, getAddStringContext, addCustomAttributes } from '../../../common/serialize/bel-serializer';\nimport { handle } from '../../../common/event-emitter/handle';\nimport { getConfiguration, getInfo, getRuntime } from '../../../common/config/config';\nimport { HarvestScheduler } from '../../../common/harvest/harvest-scheduler';\nimport { setDenyList, shouldCollectEvent } from '../../../common/deny-list/deny-list';\nimport { FEATURE_NAME } from '../constants';\nimport { FEATURE_NAMES } from '../../../loaders/features/features';\nimport { SUPPORTABILITY_METRIC_CHANNEL } from '../../metrics/constants';\nimport { AggregateBase } from '../../utils/aggregate-base';\nimport { parseGQL } from './gql';\nexport class Aggregate extends AggregateBase {\n  static featureName = FEATURE_NAME;\n  constructor(agentIdentifier, aggregator) {\n    super(agentIdentifier, aggregator, FEATURE_NAME);\n    const agentInit = getConfiguration(agentIdentifier);\n    const allAjaxIsEnabled = agentInit.ajax.enabled !== false;\n    register('xhr', storeXhr, this.featureName, this.ee);\n    if (!allAjaxIsEnabled) {\n      this.drain();\n      return; // feature will only collect timeslice metrics & ajax trace nodes if it's not fully enabled\n    }\n    const denyList = getRuntime(agentIdentifier).denyList;\n    setDenyList(denyList);\n    let ajaxEvents = [];\n    let spaAjaxEvents = {};\n    let sentAjaxEvents = [];\n    const ee = this.ee;\n    const harvestTimeSeconds = agentInit.ajax.harvestTimeSeconds || 10;\n    const MAX_PAYLOAD_SIZE = agentInit.ajax.maxPayloadSize || 1000000;\n\n    // Exposes these methods to browser test files -- future TO DO: can be removed once these fns are extracted from the constructor into class func\n    this.storeXhr = storeXhr;\n    this.prepareHarvest = prepareHarvest;\n    this.getStoredEvents = function () {\n      return {\n        ajaxEvents,\n        spaAjaxEvents\n      };\n    };\n    ee.on('interactionSaved', interaction => {\n      if (!spaAjaxEvents[interaction.id]) return;\n      // remove from the spaAjaxEvents buffer, and let spa harvest it\n      delete spaAjaxEvents[interaction.id];\n    });\n    ee.on('interactionDiscarded', interaction => {\n      if (!spaAjaxEvents[interaction.id]) return;\n      spaAjaxEvents[interaction.id].forEach(function (item) {\n        // move it from the spaAjaxEvents buffer to the ajaxEvents buffer for harvesting here\n        ajaxEvents.push(item);\n      });\n      delete spaAjaxEvents[interaction.id];\n    });\n    const scheduler = new HarvestScheduler('events', {\n      onFinished: onEventsHarvestFinished,\n      getPayload: prepareHarvest\n    }, this);\n    ee.on(\"drain-\".concat(this.featureName), () => {\n      scheduler.startTimer(harvestTimeSeconds);\n    });\n    this.drain();\n    const beacon = getInfo(agentIdentifier).errorBeacon;\n    const proxyBeacon = agentInit.proxy.beacon;\n    function storeXhr(params, metrics, startTime, endTime, type) {\n      metrics.time = startTime;\n\n      // send to session traces\n      var hash;\n      if (params.cat) {\n        hash = stringify([params.status, params.cat]);\n      } else {\n        hash = stringify([params.status, params.host, params.pathname]);\n      }\n\n      // store as metric\n      aggregator.store('xhr', hash, params, metrics);\n      if (!allAjaxIsEnabled) return;\n      if (!shouldCollectEvent(params)) {\n        if (params.hostname === beacon || proxyBeacon && params.hostname === proxyBeacon) {\n          // This doesn't make a distinction if the same-domain request is going to a different port or path...\n          handle(SUPPORTABILITY_METRIC_CHANNEL, ['Ajax/Events/Excluded/Agent'], undefined, FEATURE_NAMES.metrics, ee);\n        } else {\n          handle(SUPPORTABILITY_METRIC_CHANNEL, ['Ajax/Events/Excluded/App'], undefined, FEATURE_NAMES.metrics, ee);\n        }\n        return;\n      }\n      handle('bstXhrAgg', ['xhr', hash, params, metrics], undefined, FEATURE_NAMES.sessionTrace, ee);\n      var xhrContext = this;\n      var event = {\n        method: params.method,\n        status: params.status,\n        domain: params.host,\n        path: params.pathname,\n        requestSize: metrics.txSize,\n        responseSize: metrics.rxSize,\n        type,\n        startTime,\n        endTime,\n        callbackDuration: metrics.cbTime\n      };\n      if (xhrContext.dt) {\n        event.spanId = xhrContext.dt.spanId;\n        event.traceId = xhrContext.dt.traceId;\n        event.spanTimestamp = xhrContext.dt.timestamp;\n      }\n\n      // parsed from the AJAX body, looking for operationName param & parsing query for operationType\n      event.gql = params.gql = parseGQL({\n        body: this.body,\n        query: this?.parsedOrigin?.search\n      });\n      if (event.gql) handle(SUPPORTABILITY_METRIC_CHANNEL, ['Ajax/Events/GraphQL/Bytes-Added', stringify(event.gql).length], undefined, FEATURE_NAMES.metrics, ee);\n\n      // if the ajax happened inside an interaction, hold it until the interaction finishes\n      if (this.spaNode) {\n        var interactionId = this.spaNode.interaction.id;\n        spaAjaxEvents[interactionId] = spaAjaxEvents[interactionId] || [];\n        spaAjaxEvents[interactionId].push(event);\n      } else {\n        ajaxEvents.push(event);\n      }\n    }\n    function prepareHarvest(options) {\n      options = options || {};\n      if (ajaxEvents.length === 0) {\n        return null;\n      }\n      var payload = getPayload(ajaxEvents, options.maxPayloadSize || MAX_PAYLOAD_SIZE);\n      var payloadObjs = [];\n      for (var i = 0; i < payload.length; i++) {\n        payloadObjs.push({\n          body: {\n            e: payload[i]\n          }\n        });\n      }\n      if (options.retry) {\n        sentAjaxEvents = ajaxEvents.slice();\n      }\n      ajaxEvents = [];\n      return payloadObjs;\n    }\n    function getPayload(events, maxPayloadSize, chunks) {\n      chunks = chunks || 1;\n      var payload = [];\n      var chunkSize = events.length / chunks;\n      var eventChunks = splitChunks(events, chunkSize);\n      var tooBig = false;\n      for (var i = 0; i < eventChunks.length; i++) {\n        var currentChunk = eventChunks[i];\n        if (currentChunk.tooBig(maxPayloadSize)) {\n          if (currentChunk.events.length !== 1) {\n            /* if it is too big BUT it isnt length 1, we can split it down again,\n             else we just want to NOT push it into payload\n             because if it's length 1 and still too big for the maxPayloadSize\n             it cant get any smaller and we dont want to recurse forever */\n            tooBig = true;\n            break;\n          }\n        } else {\n          payload.push(currentChunk.payload);\n        }\n      }\n      // check if the current payload string is too big, if so then run getPayload again with more buckets\n      return tooBig ? getPayload(events, maxPayloadSize, ++chunks) : payload;\n    }\n    function onEventsHarvestFinished(result) {\n      if (result.retry && sentAjaxEvents.length > 0) {\n        ajaxEvents.unshift(...sentAjaxEvents);\n        sentAjaxEvents = [];\n      }\n    }\n    function splitChunks(arr, chunkSize) {\n      chunkSize = chunkSize || arr.length;\n      var chunks = [];\n      for (var i = 0, len = arr.length; i < len; i += chunkSize) {\n        chunks.push(new Chunk(arr.slice(i, i + chunkSize)));\n      }\n      return chunks;\n    }\n    function Chunk(events) {\n      this.addString = getAddStringContext(agentIdentifier); // pass agentIdentifier here\n      this.events = events;\n      this.payload = 'bel.7;';\n      for (var i = 0; i < events.length; i++) {\n        var event = events[i];\n        var fields = [numeric(event.startTime), numeric(event.endTime - event.startTime), numeric(0),\n        // callbackEnd\n        numeric(0),\n        // no callbackDuration for non-SPA events\n        this.addString(event.method), numeric(event.status), this.addString(event.domain), this.addString(event.path), numeric(event.requestSize), numeric(event.responseSize), event.type === 'fetch' ? 1 : '', this.addString(0),\n        // nodeId\n        nullable(event.spanId, this.addString, true) +\n        // guid\n        nullable(event.traceId, this.addString, true) +\n        // traceId\n        nullable(event.spanTimestamp, numeric, false) // timestamp\n        ];\n        var insert = '2,';\n\n        // add custom attributes\n        // gql decorators are added as custom attributes to alleviate need for new BEL schema\n        var attrParts = addCustomAttributes({\n          ...(getInfo(agentIdentifier).jsAttributes || {}),\n          ...(event.gql || {})\n        }, this.addString);\n        fields.unshift(numeric(attrParts.length));\n        insert += fields.join(',');\n        if (attrParts && attrParts.length > 0) {\n          insert += ';' + attrParts.join(';');\n        }\n        if (i + 1 < events.length) insert += ';';\n        this.payload += insert;\n      }\n      this.tooBig = function (maxPayloadSize) {\n        maxPayloadSize = maxPayloadSize || MAX_PAYLOAD_SIZE;\n        return this.payload.length * 2 > maxPayloadSize;\n      };\n    }\n  }\n}"],"names":["denyList","shouldCollectEvent","params","length","undefined","hostname","i","parsed","domainMatchesPattern","comparePath","pathname","setDenyList","denyListConfig","url","indexOf","substring","firstSlash","host","split","push","pattern","domain","path","HarvestScheduler","SharedContext","constructor","endpoint","opts","parent","_this$sharedContext","super","this","started","timeoutHandle","aborted","harvest","Harvest","sharedContext","subscribeToEOL","unload","bind","ee","on","SESSION_EVENTS","RESET","runHarvest","forceNoRetry","onUnload","startTimer","interval","initialDelay","scheduleHarvest","stopTimer","permanently","arguments","clearTimeout","delay","setTimeout","cbRanAfterSend","result","retry","onHarvestFinished","submitMethod","payload","harvests","getPayload","submitData","isFinalHarvest","Object","prototype","toString","call","send","args","sendX","raw","_send","forEach","cbFinished","customUrl","onFinished","sent","retryDelay","hasOwnProp","hasOwnProperty","MAX_ATTRIBUTES","nullable","val","fn","comma","numeric","n","noDefault","Math","floor","getAddStringContext","agentIdentifier","stringTable","create","stringTableIdx","str","obfuscator","Obfuscator","String","shouldObfuscate","obfuscateString","replace","escapable","quoteString","addCustomAttributes","attrs","addString","attrParts","mapOwn","key","serializedValue","type","stringify","isWorkerScope","globalScope","cleanupTasks","origClose","close","task","cb","isBrowserScope","subscribeToVisibilityChange","windowAddEventListener","parseGQL","body","query","gqlBody","contents","Array","isArray","opNames","opTypes","content","operation","parseSingleGQL","operationName","operationType","join","operationFramework","parseBatchGQL","parseGQLContents","gqlQuery","gqlQueryString","URLSearchParams","fromEntries","parseGQLQueryString","err","matches","trim","match","gqlContents","JSON","parse","obj","isValid","some","x","validateGQLObject","Aggregate","AggregateBase","aggregator","FEATURE_NAME","agentInit","getConfiguration","allAjaxIsEnabled","ajax","enabled","register","storeXhr","featureName","drain","getRuntime","ajaxEvents","spaAjaxEvents","sentAjaxEvents","harvestTimeSeconds","MAX_PAYLOAD_SIZE","maxPayloadSize","prepareHarvest","getStoredEvents","interaction","id","item","scheduler","unshift","concat","beacon","getInfo","errorBeacon","proxyBeacon","proxy","metrics","startTime","endTime","_this$parsedOrigin","hash","time","cat","status","store","handle","FEATURE_NAMES","sessionTrace","xhrContext","event","method","requestSize","txSize","responseSize","rxSize","callbackDuration","cbTime","dt","spanId","traceId","spanTimestamp","timestamp","gql","parsedOrigin","search","SUPPORTABILITY_METRIC_CHANNEL","spaNode","interactionId","options","payloadObjs","e","slice","events","chunks","eventChunks","arr","chunkSize","len","Chunk","splitChunks","tooBig","currentChunk","fields","insert","jsAttributes","_defineProperty"],"sourceRoot":""}