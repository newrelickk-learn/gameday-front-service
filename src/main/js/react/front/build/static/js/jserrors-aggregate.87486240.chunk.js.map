{"version":3,"file":"static/js/jserrors-aggregate.87486240.chunk.js","mappings":"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","sources":["../node_modules/@newrelic/browser-agent/dist/esm/common/harvest/harvest-scheduler.js","../node_modules/@newrelic/browser-agent/dist/esm/common/unload/eol.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/canonical-function-name.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/format-stack-trace.js","../node_modules/@newrelic/browser-agent/dist/esm/common/url/canonicalize-url.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/compute-stack-trace.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/string-hash-code.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/index.js"],"sourcesContent":["/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as submitData from '../util/submit-data';\nimport { SharedContext } from '../context/shared-context';\nimport { Harvest } from './harvest';\nimport { subscribeToEOL } from '../unload/eol';\nimport { SESSION_EVENTS } from '../session/constants';\n\n/**\n * Periodically invokes harvest calls and handles retries\n */\nexport class HarvestScheduler extends SharedContext {\n  /**\n     * Create a HarvestScheduler\n     * @param {string} endpoint - The base BAM endpoint name -- ex. 'events'\n     * @param {object} opts - The options used to configure the HarvestScheduler\n     * @param {Function} opts.onFinished - The callback to be fired when a harvest has finished\n     * @param {Function} opts.getPayload - A callback which can be triggered to return a payload for harvesting\n     * @param {number} opts.retryDelay - The number of seconds to wait before retrying after a network failure\n     * @param {boolean} opts.raw - Use a prefabricated payload shape as the harvest payload without the need for formatting\n     * @param {string} opts.customUrl - A custom url that falls outside of the shape of the standard BAM harvester url pattern.  Will use directly instead of concatenating various pieces\n     * @param {*} parent - The parent object, whose state can be passed into SharedContext\n     */\n  constructor(endpoint, opts, parent) {\n    super(parent); // gets any allowed properties from the parent and stores them in `sharedContext`\n    this.endpoint = endpoint;\n    this.opts = opts || {};\n    this.started = false;\n    this.timeoutHandle = null;\n    this.aborted = false; // this controls the per-interval and final harvests for the scheduler (currently per feature specific!)\n\n    this.harvest = new Harvest(this.sharedContext);\n\n    // unload if EOL mechanism fires\n    subscribeToEOL(this.unload.bind(this));\n\n    /* Flush all buffered data if session resets and give up retries. This should be synchronous to ensure that the correct `session` value is sent.\n      Since session-reset generates a new session ID and the ID is grabbed at send-time, any delays or retries would cause the payload to be sent under\n      the wrong session ID. */\n    this.sharedContext?.ee.on(SESSION_EVENTS.RESET, () => this.runHarvest({\n      forceNoRetry: true\n    }));\n  }\n\n  /**\n   * This function is only meant for the last outgoing harvest cycle of a page. It trickles down to using sendBeacon, which should not be used\n   * to send payloads while the page is still active, due to limitations on how much data can be buffered in the API at any one time.\n   */\n  unload() {\n    if (this.aborted) return;\n    // If opts.onUnload is defined, these are special actions to execute before attempting to send the final payload.\n    if (this.opts.onUnload) this.opts.onUnload();\n    this.runHarvest({\n      unload: true\n    });\n  }\n  startTimer(interval, initialDelay) {\n    this.interval = interval;\n    this.started = true;\n    this.scheduleHarvest(initialDelay != null ? initialDelay : this.interval);\n  }\n  stopTimer() {\n    let permanently = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.aborted = permanently; // stopping permanently is same as aborting, but this function also cleans up the setTimeout loop\n    this.started = false;\n    if (this.timeoutHandle) {\n      clearTimeout(this.timeoutHandle);\n    }\n  }\n  scheduleHarvest(delay, opts) {\n    if (this.timeoutHandle) return;\n    if (delay == null) {\n      delay = this.interval;\n    }\n    this.timeoutHandle = setTimeout(() => {\n      this.timeoutHandle = null;\n      this.runHarvest(opts);\n    }, delay * 1000);\n  }\n  runHarvest(opts) {\n    if (this.aborted) return;\n\n    /**\n     * This is executed immediately after harvest sends the data via XHR, or if there's nothing to send. Note that this excludes on unloading / sendBeacon.\n     * @param {Object} result\n     */\n    const cbRanAfterSend = result => {\n      if (opts?.forceNoRetry) result.retry = false; // discard unsent data rather than re-queuing for next harvest attempt\n      this.onHarvestFinished(opts, result);\n    };\n    let harvests = [];\n    let submitMethod;\n    let payload;\n    if (this.opts.getPayload) {\n      // Ajax & PVT & SR features provide a callback function to get data for harvesting\n      submitMethod = submitData.getSubmitMethod({\n        isFinalHarvest: opts?.unload\n      });\n      if (!submitMethod) return false;\n      const retry = !opts?.unload && submitMethod === submitData.xhr;\n      payload = this.opts.getPayload({\n        retry\n      });\n      if (!payload) {\n        if (this.started) {\n          this.scheduleHarvest();\n        }\n        return;\n      }\n      payload = Object.prototype.toString.call(payload) === '[object Array]' ? payload : [payload];\n      harvests.push(...payload);\n    }\n\n    /** sendX is used for features that do not supply a preformatted payload via \"getPayload\" */\n    let send = args => this.harvest.sendX(args);\n    if (harvests.length) {\n      /** _send is the underlying method for sending in the harvest, if sending raw we can bypass the other helpers completely which format the payloads */\n      if (this.opts.raw) send = args => this.harvest._send(args);\n      /** send is used to formated the payloads from \"getPayload\" and obfuscate before sending */else send = args => this.harvest.send(args);\n    } else {\n      // force it to run at least once in sendX mode\n      harvests.push(undefined);\n    }\n    harvests.forEach(payload => {\n      send({\n        endpoint: this.endpoint,\n        payload,\n        opts,\n        submitMethod,\n        cbFinished: cbRanAfterSend,\n        customUrl: this.opts.customUrl,\n        raw: this.opts.raw\n      });\n    });\n    if (this.started) {\n      this.scheduleHarvest();\n    }\n  }\n  onHarvestFinished(opts, result) {\n    if (this.opts.onFinished) {\n      this.opts.onFinished(result);\n    }\n    if (result.sent && result.retry) {\n      const delay = result.delay || this.opts.retryDelay;\n      // reschedule next harvest if should be delayed longer\n      if (this.started && delay) {\n        clearTimeout(this.timeoutHandle);\n        this.timeoutHandle = null;\n        this.scheduleHarvest(delay, opts);\n      } else if (!this.started && delay) {\n        // if not running on a timer, schedule a single retry\n        this.scheduleHarvest(delay, opts);\n      }\n    }\n  }\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { windowAddEventListener } from '../event-listener/event-listener-opts';\nimport { globalScope, isWorkerScope, isBrowserScope } from '../constants/runtime';\nimport { subscribeToVisibilityChange } from '../window/page-visibility';\nif (isWorkerScope) {\n  globalScope.cleanupTasks = []; // create new list on WorkerGlobalScope to track funcs to run before exiting thread\n\n  const origClose = globalScope.close;\n  globalScope.close = () => {\n    // on worker's EoL signal, execute all \"listeners\", e.g. final harvests\n    for (let task of globalScope.cleanupTasks) {\n      task();\n    }\n    origClose();\n  };\n}\n\n/**\n * Subscribes a provided callback to the time/event when the agent should treat it as end-of-life.\n * This is used, for example, to submit a final harvest and send all remaining data on best-effort.\n * @param {function} cb - func to run before or during the last reliable event or time of an env's life span\n */\nexport function subscribeToEOL(cb) {\n  if (isBrowserScope) {\n    subscribeToVisibilityChange(cb, true); // when user switches tab or hides window, esp. mobile scenario\n    windowAddEventListener('pagehide', cb); // when user navigates away, and because safari iOS v14.4- doesn't fully support vis change\n    // --this ought to be removed once support for version below 14.5 phases out\n  } else if (isWorkerScope) {\n    globalScope.cleanupTasks.push(cb); // close() should run these tasks before quitting thread\n  }\n  // By default (for other env), this fn has no effect.\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst canonicalFunctionNameRe = /([a-z0-9]+)$/i;\n\n/**\n * Given a function name string, extracts only an alphanumeric segment at the end of the string (if one exists).\n * This is useful for stack traces, where functions might not be named (e.g., anonymous, computed).\n *\n * @param {string} functionNameString - The original function name string.\n * @returns {string|undefined} The canonical function name, or undefined if the input is falsy or no alphanumeric segments are found.\n */\nexport function canonicalFunctionName(functionNameString) {\n  if (!functionNameString) return;\n  const match = functionNameString.match(canonicalFunctionNameRe);\n  if (match) return match[1];\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nvar stripNewlinesRegex = /^\\n+|\\n+$/g;\nvar MAX_STACK_TRACE_LENGTH = 65530;\nexport function formatStackTrace(stackLines) {\n  return truncateStackLines(stackLines).replace(stripNewlinesRegex, '');\n}\n\n// takes array of stack lines and returns string with top 50 and buttom 50 lines\nfunction truncateStackLines(stackLines) {\n  var stackString;\n  if (stackLines.length > 100) {\n    var truncatedLines = stackLines.length - 100;\n    stackString = stackLines.slice(0, 50).join('\\n');\n    stackString += '\\n< ...truncated ' + truncatedLines + ' lines... >\\n';\n    stackString += stackLines.slice(-50).join('\\n');\n  } else {\n    stackString = stackLines.join('\\n');\n  }\n  return stackString;\n}\n\n// truncates stack string to limit what is sent to backend\nexport function truncateSize(stackString) {\n  return stackString.length > MAX_STACK_TRACE_LENGTH ? stackString.substr(0, MAX_STACK_TRACE_LENGTH) : stackString;\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { initialLocation } from '../constants/runtime';\nimport { cleanURL } from './clean-url';\n\n/**\n * Converts a URL to its basic form without a query string or fragment. If the resulting URL is the same as the\n * loader's origin URL, returns '<inline>'.\n * @param {string} url - The URL to be canonicalized.\n * @param {string} loaderOriginUrl - The origin URL of the agent loader, used for inline detection.\n * @returns {string} The canonicalized URL, or '<inline>' if the URL matches the loader origin URL.\n */\nexport function canonicalizeUrl(url) {\n  if (typeof url !== 'string') return '';\n  const cleanedUrl = cleanURL(url);\n  const cleanedGlobalScopeUrl = cleanURL(initialLocation);\n\n  // If the URL matches the origin URL of the loader, we assume it originated within an inline script.\n  if (cleanedUrl === cleanedGlobalScopeUrl) {\n    return '<inline>';\n  } else {\n    return cleanedUrl;\n  }\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* eslint-disable no-useless-escape */\n\n// computeStackTrace: cross-browser stack traces in JavaScript\n//\n// Syntax:\n//   s = computeStackTrace(exception) // consider using TraceKit.report instead\n// Returns:\n//   s.name              - exception name\n//   s.message           - exception message\n//   s.stack[i].url      - JavaScript or HTML file URL\n//   s.stack[i].func     - function name, or empty for anonymous functions\n//   s.stack[i].line     - line number, if known\n//   s.stack[i].column   - column number, if known\n//   s.stack[i].context  - an array of source code lines; the middle element corresponds to the correct line#\n//   s.mode              - 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace\n//\n// Supports:\n//   - Firefox:  full stack trace with line numbers and unreliable column\n//               number on top frame\n//   - Chrome:   full stack trace with line and column numbers\n//   - Safari:   line and column number for the topmost stacktrace element\n//               only\n//   - IE:       no line numbers whatsoever\n\n// Contents of Exception in various browsers.\n//\n// SAFARI:\n// ex.message = Can't find variable: qq\n// ex.line = 59\n// ex.sourceId = 580238192\n// ex.sourceURL = http://...\n// ex.expressionBeginOffset = 96\n// ex.expressionCaretOffset = 98\n// ex.expressionEndOffset = 98\n// ex.name = ReferenceError\n//\n// FIREFOX:\n// ex.message = qq is not defined\n// ex.fileName = http://...\n// ex.lineNumber = 59\n// ex.stack = ...stack trace... (see the example below)\n// ex.name = ReferenceError\n//\n// CHROME:\n// ex.message = qq is not defined\n// ex.name = ReferenceError\n// ex.type = not_defined\n// ex.arguments = ['aa']\n// ex.stack = ...stack trace...\n//\n// INTERNET EXPLORER:\n// ex.message = ...\n// ex.name = ReferenceError\nimport { formatStackTrace } from './format-stack-trace';\nimport { canonicalizeUrl } from '../../../common/url/canonicalize-url';\nvar debug = false;\nvar classNameRegex = /function (.+?)\\s*\\(/;\nvar chrome = /^\\s*at (?:((?:\\[object object\\])?(?:[^(]*\\([^)]*\\))*[^()]*(?: \\[as \\S+\\])?) )?\\(?((?:file|http|https|chrome-extension):.*?)?:(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nvar gecko = /^\\s*(?:(\\S*|global code)(?:\\(.*?\\))?@)?((?:file|http|https|chrome|safari-extension).*?):(\\d+)(?::(\\d+))?\\s*$/i;\nvar chromeEval = /^\\s*at .+ \\(eval at \\S+ \\((?:(?:file|http|https):[^)]+)?\\)(?:, [^:]*:\\d+:\\d+)?\\)$/i;\nvar ieEval = /^\\s*at Function code \\(Function code:\\d+:\\d+\\)\\s*/i;\n\n/**\n * Represents an error with a stack trace.\n * @typedef {Object} StackInfo\n * @property {string} name - The name of the error (e.g. 'TypeError').\n * @property {string} message - The error message.\n * @property {string} stackString - The stack trace as a string.\n * @property {Array<Object>} frames - An array of frames in the stack trace.\n * @property {string} frames.url - The URL of the file containing the code for the frame.\n * @property {string} frames.func - The name of the function associated with the frame.\n * @property {number} frames.line - The line number of the code in the frame.\n */\n\n/**\n * Attempts to compute a stack trace for the given exception.\n * @param {Error} ex - The exception for which to compute the stack trace.\n * @returns {StackInfo} A stack trace object containing information about the frames on the stack.\n */\nexport function computeStackTrace(ex) {\n  var stack = null;\n  try {\n    stack = computeStackTraceFromStackProp(ex);\n    if (stack) {\n      return stack;\n    }\n  } catch (e) {\n    if (debug) {\n      throw e;\n    }\n  }\n  try {\n    stack = computeStackTraceBySourceAndLine(ex);\n    if (stack) {\n      return stack;\n    }\n  } catch (e) {\n    if (debug) {\n      throw e;\n    }\n  }\n  try {\n    stack = computeStackTraceWithMessageOnly(ex);\n    if (stack) {\n      return stack;\n    }\n  } catch (e) {\n    if (debug) {\n      throw e;\n    }\n  }\n  return {\n    mode: 'failed',\n    stackString: '',\n    frames: []\n  };\n}\n\n/**\n * Computes stack trace information from the stack property. Chrome and Gecko use this property.\n *\n * @param {Error} ex - The error object to compute the stack trace for.\n * @return {?Object.<string, *>} Stack trace information.\n */\nfunction computeStackTraceFromStackProp(ex) {\n  if (!ex.stack) {\n    return null;\n  }\n  var errorInfo = ex.stack.split('\\n').reduce(parseStackProp, {\n    frames: [],\n    stackLines: [],\n    wrapperSeen: false\n  });\n  if (!errorInfo.frames.length) return null;\n  return {\n    mode: 'stack',\n    name: ex.name || getClassName(ex),\n    message: ex.message,\n    stackString: formatStackTrace(errorInfo.stackLines),\n    frames: errorInfo.frames\n  };\n}\n\n/**\n * Parses a line from a JavaScript error stack trace and adds it to the given `info` object.\n * Ignores all stack entries thrown from one of our wrapper functions.\n *\n * @param {object} info - The `info` object to add the parsed line to.\n * @param {string} line - The line to parse.\n * @returns {object} The `info` object with the parsed line added.\n */\nfunction parseStackProp(info, line) {\n  let element = getStackElement(line);\n\n  // This catches lines that aren't frames (like the first line stating the error).\n  if (!element) {\n    info.stackLines.push(line);\n    return info;\n  }\n\n  // Once we've seen a wrapper, ignore all subsequent stack entries.\n  if (isNrWrapper(element.func)) info.wrapperSeen = true;\n  if (!info.wrapperSeen) {\n    // Query strings and fragments should be removed, and URLs matching the loader's origin should be \"<inline>\".\n    let canonicalUrl = canonicalizeUrl(element.url);\n    if (canonicalUrl !== element.url) {\n      line = line.replace(element.url, canonicalUrl);\n      element.url = canonicalUrl;\n    }\n    info.stackLines.push(line);\n    info.frames.push(element);\n  }\n  return info;\n}\n\n/**\n * Parses a line from a JavaScript error stack trace to extract information about a stack trace element, such as the\n * URL, function name, line number, and column number.\n *\n * @param {string} line - A single line from a JavaScript error stack trace.\n * @returns {object} An object containing information about the stack trace element, including the URL, function\n *     name, line number, and column number (if available).\n */\nfunction getStackElement(line) {\n  var parts = line.match(gecko);\n  if (!parts) parts = line.match(chrome);\n  if (parts) {\n    return {\n      url: parts[2],\n      func: parts[1] !== 'Anonymous function' && parts[1] !== 'global code' && parts[1] || null,\n      line: +parts[3],\n      column: parts[4] ? +parts[4] : null\n    };\n  }\n  if (line.match(chromeEval) || line.match(ieEval) || line === 'anonymous') {\n    return {\n      func: 'evaluated code'\n    };\n  }\n}\n\n/**\n * Computes a stack trace object from an error object, by extracting the source and line number from the error object,\n * and using them to create a single stack frame.\n *\n * @param {Error} ex - The error object to compute the stack trace for.\n * @returns {Object|null} - An object representing the computed stack trace, or null if the\n * input error object does not contain a line number.\n */\nfunction computeStackTraceBySourceAndLine(ex) {\n  if (!('line' in ex)) return null;\n  var className = ex.name || getClassName(ex);\n\n  // Safari does not provide a URL for errors in eval'd code\n  if (!ex.sourceURL) {\n    return {\n      mode: 'sourceline',\n      name: className,\n      message: ex.message,\n      stackString: className + ': ' + ex.message + '\\n    in evaluated code',\n      frames: [{\n        func: 'evaluated code'\n      }]\n    };\n  }\n\n  // Remove any query string and fragment\n  var canonicalUrl = canonicalizeUrl(ex.sourceURL);\n  var stackString = className + ': ' + ex.message + '\\n    at ' + canonicalUrl;\n  if (ex.line) {\n    stackString += ':' + ex.line;\n    if (ex.column) {\n      stackString += ':' + ex.column;\n    }\n  }\n  return {\n    mode: 'sourceline',\n    name: className,\n    message: ex.message,\n    stackString,\n    frames: [{\n      url: canonicalUrl,\n      line: ex.line,\n      column: ex.column\n    }]\n  };\n}\n\n/**\n * For exceptions with no stack and only a message, derives a stack trace by extracting the class name and message.\n *\n * @param {Error} ex - The exception for which to compute the stack trace.\n * @returns {StackTrace} A stack trace object containing the name and message of the exception.\n */\nfunction computeStackTraceWithMessageOnly(ex) {\n  var className = ex.name || getClassName(ex);\n  if (!className) return null;\n  return {\n    mode: 'nameonly',\n    name: className,\n    message: ex.message,\n    stackString: className + ': ' + ex.message,\n    frames: []\n  };\n}\n\n/**\n * Attempts to extract the name of the constructor function (the class) of the given object.\n *\n * @param {Object} obj - The object for which to extract the constructor function name.\n * @returns {string} The name of the constructor function, or 'unknown' if the name cannot be determined.\n */\nfunction getClassName(obj) {\n  var results = classNameRegex.exec(String(obj.constructor));\n  return results && results.length > 1 ? results[1] : 'unknown';\n}\n\n/**\n * Checks whether the given function name is a New Relic wrapper function.\n *\n * @param {string} functionName - The name of the function to check.\n * @returns {boolean} True if the function name includes the string 'nrWrapper', false otherwise.\n */\nfunction isNrWrapper(functionName) {\n  return functionName && functionName.indexOf('nrWrapper') >= 0;\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport function stringHashCode(string) {\n  var hash = 0;\n  var charVal;\n  if (!string || !string.length) return hash;\n  for (var i = 0; i < string.length; i++) {\n    charVal = string.charCodeAt(i);\n    hash = (hash << 5) - hash + charVal;\n    hash = hash | 0; // Convert to 32bit integer\n  }\n  return hash;\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { canonicalFunctionName } from './canonical-function-name';\nimport { computeStackTrace } from './compute-stack-trace';\nimport { stringHashCode } from './string-hash-code';\nimport { truncateSize } from './format-stack-trace';\nimport { registerHandler as register } from '../../../common/event-emitter/register-handler';\nimport { HarvestScheduler } from '../../../common/harvest/harvest-scheduler';\nimport { stringify } from '../../../common/util/stringify';\nimport { handle } from '../../../common/event-emitter/handle';\nimport { mapOwn } from '../../../common/util/map-own';\nimport { getInfo, getConfigurationValue, getRuntime } from '../../../common/config/config';\nimport { now } from '../../../common/timing/now';\nimport { globalScope } from '../../../common/constants/runtime';\nimport { FEATURE_NAME } from '../constants';\nimport { FEATURE_NAMES } from '../../../loaders/features/features';\nimport { AggregateBase } from '../../utils/aggregate-base';\n\n/**\n * @typedef {import('./compute-stack-trace.js').StackInfo} StackInfo\n */\n\nexport class Aggregate extends AggregateBase {\n  static featureName = FEATURE_NAME;\n  constructor(agentIdentifier, aggregator) {\n    var _this;\n    super(agentIdentifier, aggregator, FEATURE_NAME);\n    _this = this;\n    this.stackReported = {};\n    this.observedAt = {};\n    this.pageviewReported = {};\n    this.errorCache = {};\n    this.currentBody = undefined;\n    this.errorOnPage = false;\n\n    // this will need to change to match whatever ee we use in the instrument\n    this.ee.on('interactionSaved', interaction => this.onInteractionSaved(interaction));\n\n    // this will need to change to match whatever ee we use in the instrument\n    this.ee.on('interactionDiscarded', interaction => this.onInteractionDiscarded(interaction));\n    register('err', function () {\n      return _this.storeError(...arguments);\n    }, this.featureName, this.ee);\n    register('ierr', function () {\n      return _this.storeError(...arguments);\n    }, this.featureName, this.ee);\n    const harvestTimeSeconds = getConfigurationValue(this.agentIdentifier, 'jserrors.harvestTimeSeconds') || 10;\n    const scheduler = new HarvestScheduler('jserrors', {\n      onFinished: function () {\n        return _this.onHarvestFinished(...arguments);\n      }\n    }, this);\n    scheduler.harvest.on('jserrors', function () {\n      return _this.onHarvestStarted(...arguments);\n    });\n\n    // Don't start harvesting until \"drain\" for this feat has been called (which currently requires RUM response).\n    this.ee.on(\"drain-\".concat(this.featureName), () => {\n      if (!this.blocked) scheduler.startTimer(harvestTimeSeconds); // and only if ingest will accept jserror payloads\n    });\n\n    // If RUM-call's response determines that customer lacks entitlements for the /jserror ingest endpoint, don't harvest at all.\n    register('block-err', () => {\n      this.blocked = true;\n      scheduler.stopTimer(true);\n    }, this.featureName, this.ee);\n    this.drain();\n  }\n  onHarvestStarted(options) {\n    // this gets rid of dependency in AJAX module\n    var body = this.aggregator.take(['err', 'ierr', 'xhr']);\n    if (options.retry) {\n      this.currentBody = body;\n    }\n    var payload = {\n      body,\n      qs: {}\n    };\n    var releaseIds = stringify(getRuntime(this.agentIdentifier).releaseIds);\n    if (releaseIds !== '{}') {\n      payload.qs.ri = releaseIds;\n    }\n    if (body && body.err && body.err.length && !this.errorOnPage) {\n      payload.qs.pve = '1';\n      this.errorOnPage = true;\n    }\n    return payload;\n  }\n  onHarvestFinished(result) {\n    if (result.retry && this.currentBody) {\n      mapOwn(this.currentBody, (key, value) => {\n        for (var i = 0; i < value.length; i++) {\n          var bucket = value[i];\n          var name = this.getBucketName(key, bucket.params, bucket.custom);\n          this.aggregator.merge(key, name, bucket.metrics, bucket.params, bucket.custom);\n        }\n      });\n      this.currentBody = null;\n    }\n  }\n  nameHash(params) {\n    return stringHashCode(\"\".concat(params.exceptionClass, \"_\").concat(params.message, \"_\").concat(params.stack_trace || params.browser_stack_hash));\n  }\n  getBucketName(objType, params, customParams) {\n    if (objType === 'xhr') {\n      return stringHashCode(stringify(params)) + ':' + stringHashCode(stringify(customParams));\n    }\n    return this.nameHash(params) + ':' + stringHashCode(stringify(customParams));\n  }\n\n  /**\n   * Builds a standardized stack trace string from the frames in the given `stackInfo` object, with each frame separated\n   * by a newline character. Lines take the form `<functionName>@<url>:<lineNumber>`.\n   *\n   * @param {StackInfo} stackInfo - An object specifying a stack string and individual frames.\n   * @returns {string} A canonical stack string built from the URLs and function names in the given `stackInfo` object.\n   */\n  buildCanonicalStackString(stackInfo) {\n    var canonicalStackString = '';\n    for (var i = 0; i < stackInfo.frames.length; i++) {\n      var frame = stackInfo.frames[i];\n      var func = canonicalFunctionName(frame.func);\n      if (canonicalStackString) canonicalStackString += '\\n';\n      if (func) canonicalStackString += func + '@';\n      if (typeof frame.url === 'string') canonicalStackString += frame.url;\n      if (frame.line) canonicalStackString += ':' + frame.line;\n    }\n    return canonicalStackString;\n  }\n  storeError(err, time, internal, customAttributes) {\n    // are we in an interaction\n    time = time || now();\n    const agentRuntime = getRuntime(this.agentIdentifier);\n    let filterOutput;\n    if (!internal && agentRuntime.onerror) {\n      filterOutput = agentRuntime.onerror(err);\n      if (filterOutput && !(typeof filterOutput.group === 'string' && filterOutput.group.length)) {\n        // All truthy values mean don't report (store) the error, per backwards-compatible usage,\n        // - EXCEPT if a fingerprinting label is returned, via an object with key of 'group' and value of non-empty string\n        return;\n      }\n      // Again as with previous usage, all falsey values would include the error.\n    }\n    var stackInfo = computeStackTrace(err);\n    var canonicalStackString = this.buildCanonicalStackString(stackInfo);\n    const params = {\n      stackHash: stringHashCode(canonicalStackString),\n      exceptionClass: stackInfo.name,\n      request_uri: globalScope?.location.pathname\n    };\n    if (stackInfo.message) params.message = '' + stackInfo.message;\n    // Notice if filterOutput isn't false|undefined OR our specified object, this func would've returned already (so it's unnecessary to req-check group).\n    // Do not modify the name ('errorGroup') of params without DEM approval!\n    if (filterOutput?.group) params.errorGroup = filterOutput.group;\n\n    /**\n     * The bucketHash is different from the params.stackHash because the params.stackHash is based on the canonicalized\n     * stack trace and is used downstream in NR1 to attempt to group the same errors across different browsers. However,\n     * the canonical stack trace excludes items like the column number increasing the hit-rate of different errors potentially\n     * bucketing and ultimately resulting in the loss of data in NR1.\n     */\n    var bucketHash = stringHashCode(\"\".concat(stackInfo.name, \"_\").concat(stackInfo.message, \"_\").concat(stackInfo.stackString));\n    if (!this.stackReported[bucketHash]) {\n      this.stackReported[bucketHash] = true;\n      params.stack_trace = truncateSize(stackInfo.stackString);\n      this.observedAt[bucketHash] = agentRuntime.offset + time;\n    } else {\n      params.browser_stack_hash = stringHashCode(stackInfo.stackString);\n    }\n    params.releaseIds = stringify(agentRuntime.releaseIds);\n\n    // When debugging stack canonicalization/hashing, uncomment these lines for\n    // more output in the test logs\n    // params.origStack = err.stack\n    // params.canonicalStack = canonicalStack\n\n    if (!this.pageviewReported[bucketHash]) {\n      params.pageview = 1;\n      this.pageviewReported[bucketHash] = true;\n    }\n    if (agentRuntime?.session?.state?.sessionReplayMode) params.hasReplay = true;\n    params.firstOccurrenceTimestamp = this.observedAt[bucketHash];\n    var type = internal ? 'ierr' : 'err';\n    var newMetrics = {\n      time\n    };\n\n    // sr, stn and spa aggregators listen to this event - stn sends the error in its payload,\n    // and spa annotates the error with interaction info\n    const msg = [type, bucketHash, params, newMetrics];\n    handle('errorAgg', msg, undefined, FEATURE_NAMES.sessionTrace, this.ee);\n    handle('errorAgg', msg, undefined, FEATURE_NAMES.spa, this.ee);\n    handle('errorAgg', msg, undefined, FEATURE_NAMES.sessionReplay, this.ee);\n\n    // still send EE events for other features such as above, but stop this one from aggregating internal data\n    if (this.blocked) return;\n    var att = getInfo(this.agentIdentifier).jsAttributes;\n    if (params._interactionId != null) {\n      // hold on to the error until the interaction finishes\n      this.errorCache[params._interactionId] = this.errorCache[params._interactionId] || [];\n      this.errorCache[params._interactionId].push([type, bucketHash, params, newMetrics, att, customAttributes]);\n    } else {\n      // store custom attributes\n      var customParams = {};\n      mapOwn(att, setCustom);\n      if (customAttributes) {\n        mapOwn(customAttributes, setCustom);\n      }\n      var jsAttributesHash = stringHashCode(stringify(customParams));\n      var aggregateHash = bucketHash + ':' + jsAttributesHash;\n      this.aggregator.store(type, aggregateHash, params, newMetrics, customParams);\n    }\n    function setCustom(key, val) {\n      customParams[key] = val && typeof val === 'object' ? stringify(val) : val;\n    }\n  }\n  onInteractionSaved(interaction) {\n    if (!this.errorCache[interaction.id] || this.blocked) return;\n    this.errorCache[interaction.id].forEach(item => {\n      var customParams = {};\n      var globalCustomParams = item[4];\n      var localCustomParams = item[5];\n      mapOwn(globalCustomParams, setCustom);\n      mapOwn(interaction.root.attrs.custom, setCustom);\n      mapOwn(localCustomParams, setCustom);\n      var params = item[2];\n      params.browserInteractionId = interaction.root.attrs.id;\n      delete params._interactionId;\n      if (params._interactionNodeId) {\n        params.parentNodeId = params._interactionNodeId.toString();\n        delete params._interactionNodeId;\n      }\n      var hash = item[1] + interaction.root.attrs.id;\n      var jsAttributesHash = stringHashCode(stringify(customParams));\n      var aggregateHash = hash + ':' + jsAttributesHash;\n      this.aggregator.store(item[0], aggregateHash, params, item[3], customParams);\n      function setCustom(key, val) {\n        customParams[key] = val && typeof val === 'object' ? stringify(val) : val;\n      }\n    });\n    delete this.errorCache[interaction.id];\n  }\n  onInteractionDiscarded(interaction) {\n    if (!this.errorCache || !this.errorCache[interaction.id] || this.blocked) return;\n    this.errorCache[interaction.id].forEach(item => {\n      var customParams = {};\n      var globalCustomParams = item[4];\n      var localCustomParams = item[5];\n      mapOwn(globalCustomParams, setCustom);\n      mapOwn(interaction.root.attrs.custom, setCustom);\n      mapOwn(localCustomParams, setCustom);\n      var params = item[2];\n      delete params._interactionId;\n      delete params._interactionNodeId;\n      var hash = item[1];\n      var jsAttributesHash = stringHashCode(stringify(customParams));\n      var aggregateHash = hash + ':' + jsAttributesHash;\n      this.aggregator.store(item[0], aggregateHash, item[2], item[3], customParams);\n      function setCustom(key, val) {\n        customParams[key] = val && typeof val === 'object' ? stringify(val) : val;\n      }\n    });\n    delete this.errorCache[interaction.id];\n  }\n}"],"names":["HarvestScheduler","SharedContext","constructor","endpoint","opts","parent","_this$sharedContext","super","this","started","timeoutHandle","aborted","harvest","Harvest","sharedContext","subscribeToEOL","unload","bind","ee","on","SESSION_EVENTS","RESET","runHarvest","forceNoRetry","onUnload","startTimer","interval","initialDelay","scheduleHarvest","stopTimer","permanently","arguments","length","undefined","clearTimeout","delay","setTimeout","cbRanAfterSend","result","retry","onHarvestFinished","submitMethod","payload","harvests","getPayload","submitData","isFinalHarvest","Object","prototype","toString","call","push","send","args","sendX","raw","_send","forEach","cbFinished","customUrl","onFinished","sent","retryDelay","isWorkerScope","globalScope","cleanupTasks","origClose","close","task","cb","isBrowserScope","subscribeToVisibilityChange","windowAddEventListener","canonicalFunctionNameRe","canonicalFunctionName","functionNameString","match","stripNewlinesRegex","formatStackTrace","stackLines","stackString","truncatedLines","slice","join","truncateStackLines","replace","canonicalizeUrl","url","cleanedUrl","cleanURL","initialLocation","debug","classNameRegex","chrome","gecko","chromeEval","ieEval","computeStackTrace","ex","stack","errorInfo","split","reduce","parseStackProp","frames","wrapperSeen","mode","name","getClassName","message","computeStackTraceFromStackProp","e","className","sourceURL","func","canonicalUrl","line","column","computeStackTraceBySourceAndLine","computeStackTraceWithMessageOnly","info","element","parts","getStackElement","functionName","indexOf","obj","results","exec","String","stringHashCode","string","hash","i","charCodeAt","Aggregate","AggregateBase","agentIdentifier","aggregator","_this","FEATURE_NAME","stackReported","observedAt","pageviewReported","errorCache","currentBody","errorOnPage","interaction","onInteractionSaved","onInteractionDiscarded","register","storeError","featureName","harvestTimeSeconds","getConfigurationValue","scheduler","onHarvestStarted","concat","blocked","drain","options","body","take","qs","releaseIds","stringify","getRuntime","ri","err","pve","mapOwn","key","value","bucket","getBucketName","params","custom","merge","metrics","nameHash","exceptionClass","stack_trace","browser_stack_hash","objType","customParams","buildCanonicalStackString","stackInfo","canonicalStackString","frame","time","internal","customAttributes","_filterOutput","_agentRuntime$session","now","agentRuntime","filterOutput","onerror","group","stackHash","request_uri","location","pathname","errorGroup","bucketHash","substr","offset","pageview","session","state","sessionReplayMode","hasReplay","firstOccurrenceTimestamp","type","newMetrics","msg","handle","FEATURE_NAMES","sessionTrace","spa","sessionReplay","att","getInfo","jsAttributes","_interactionId","setCustom","aggregateHash","store","val","id","item","globalCustomParams","localCustomParams","root","attrs","browserInteractionId","_interactionNodeId","parentNodeId","_defineProperty"],"sourceRoot":""}