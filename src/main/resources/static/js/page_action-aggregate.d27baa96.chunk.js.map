{"version":3,"file":"static/js/page_action-aggregate.d27baa96.chunk.js","mappings":"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","sources":["../node_modules/@newrelic/browser-agent/dist/esm/common/harvest/harvest-scheduler.js","../node_modules/@newrelic/browser-agent/dist/esm/common/unload/eol.js","../node_modules/@newrelic/browser-agent/dist/esm/features/page_action/aggregate/index.js"],"sourcesContent":["/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as submitData from '../util/submit-data';\nimport { SharedContext } from '../context/shared-context';\nimport { Harvest } from './harvest';\nimport { subscribeToEOL } from '../unload/eol';\nimport { SESSION_EVENTS } from '../session/constants';\n\n/**\n * Periodically invokes harvest calls and handles retries\n */\nexport class HarvestScheduler extends SharedContext {\n  /**\n     * Create a HarvestScheduler\n     * @param {string} endpoint - The base BAM endpoint name -- ex. 'events'\n     * @param {object} opts - The options used to configure the HarvestScheduler\n     * @param {Function} opts.onFinished - The callback to be fired when a harvest has finished\n     * @param {Function} opts.getPayload - A callback which can be triggered to return a payload for harvesting\n     * @param {number} opts.retryDelay - The number of seconds to wait before retrying after a network failure\n     * @param {boolean} opts.raw - Use a prefabricated payload shape as the harvest payload without the need for formatting\n     * @param {string} opts.customUrl - A custom url that falls outside of the shape of the standard BAM harvester url pattern.  Will use directly instead of concatenating various pieces\n     * @param {*} parent - The parent object, whose state can be passed into SharedContext\n     */\n  constructor(endpoint, opts, parent) {\n    super(parent); // gets any allowed properties from the parent and stores them in `sharedContext`\n    this.endpoint = endpoint;\n    this.opts = opts || {};\n    this.started = false;\n    this.timeoutHandle = null;\n    this.aborted = false; // this controls the per-interval and final harvests for the scheduler (currently per feature specific!)\n\n    this.harvest = new Harvest(this.sharedContext);\n\n    // unload if EOL mechanism fires\n    subscribeToEOL(this.unload.bind(this));\n\n    /* Flush all buffered data if session resets and give up retries. This should be synchronous to ensure that the correct `session` value is sent.\n      Since session-reset generates a new session ID and the ID is grabbed at send-time, any delays or retries would cause the payload to be sent under\n      the wrong session ID. */\n    this.sharedContext?.ee.on(SESSION_EVENTS.RESET, () => this.runHarvest({\n      forceNoRetry: true\n    }));\n  }\n\n  /**\n   * This function is only meant for the last outgoing harvest cycle of a page. It trickles down to using sendBeacon, which should not be used\n   * to send payloads while the page is still active, due to limitations on how much data can be buffered in the API at any one time.\n   */\n  unload() {\n    if (this.aborted) return;\n    // If opts.onUnload is defined, these are special actions to execute before attempting to send the final payload.\n    if (this.opts.onUnload) this.opts.onUnload();\n    this.runHarvest({\n      unload: true\n    });\n  }\n  startTimer(interval, initialDelay) {\n    this.interval = interval;\n    this.started = true;\n    this.scheduleHarvest(initialDelay != null ? initialDelay : this.interval);\n  }\n  stopTimer() {\n    let permanently = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.aborted = permanently; // stopping permanently is same as aborting, but this function also cleans up the setTimeout loop\n    this.started = false;\n    if (this.timeoutHandle) {\n      clearTimeout(this.timeoutHandle);\n    }\n  }\n  scheduleHarvest(delay, opts) {\n    if (this.timeoutHandle) return;\n    if (delay == null) {\n      delay = this.interval;\n    }\n    this.timeoutHandle = setTimeout(() => {\n      this.timeoutHandle = null;\n      this.runHarvest(opts);\n    }, delay * 1000);\n  }\n  runHarvest(opts) {\n    if (this.aborted) return;\n\n    /**\n     * This is executed immediately after harvest sends the data via XHR, or if there's nothing to send. Note that this excludes on unloading / sendBeacon.\n     * @param {Object} result\n     */\n    const cbRanAfterSend = result => {\n      if (opts?.forceNoRetry) result.retry = false; // discard unsent data rather than re-queuing for next harvest attempt\n      this.onHarvestFinished(opts, result);\n    };\n    let harvests = [];\n    let submitMethod;\n    let payload;\n    if (this.opts.getPayload) {\n      // Ajax & PVT & SR features provide a callback function to get data for harvesting\n      submitMethod = submitData.getSubmitMethod({\n        isFinalHarvest: opts?.unload\n      });\n      if (!submitMethod) return false;\n      const retry = !opts?.unload && submitMethod === submitData.xhr;\n      payload = this.opts.getPayload({\n        retry\n      });\n      if (!payload) {\n        if (this.started) {\n          this.scheduleHarvest();\n        }\n        return;\n      }\n      payload = Object.prototype.toString.call(payload) === '[object Array]' ? payload : [payload];\n      harvests.push(...payload);\n    }\n\n    /** sendX is used for features that do not supply a preformatted payload via \"getPayload\" */\n    let send = args => this.harvest.sendX(args);\n    if (harvests.length) {\n      /** _send is the underlying method for sending in the harvest, if sending raw we can bypass the other helpers completely which format the payloads */\n      if (this.opts.raw) send = args => this.harvest._send(args);\n      /** send is used to formated the payloads from \"getPayload\" and obfuscate before sending */else send = args => this.harvest.send(args);\n    } else {\n      // force it to run at least once in sendX mode\n      harvests.push(undefined);\n    }\n    harvests.forEach(payload => {\n      send({\n        endpoint: this.endpoint,\n        payload,\n        opts,\n        submitMethod,\n        cbFinished: cbRanAfterSend,\n        customUrl: this.opts.customUrl,\n        raw: this.opts.raw\n      });\n    });\n    if (this.started) {\n      this.scheduleHarvest();\n    }\n  }\n  onHarvestFinished(opts, result) {\n    if (this.opts.onFinished) {\n      this.opts.onFinished(result);\n    }\n    if (result.sent && result.retry) {\n      const delay = result.delay || this.opts.retryDelay;\n      // reschedule next harvest if should be delayed longer\n      if (this.started && delay) {\n        clearTimeout(this.timeoutHandle);\n        this.timeoutHandle = null;\n        this.scheduleHarvest(delay, opts);\n      } else if (!this.started && delay) {\n        // if not running on a timer, schedule a single retry\n        this.scheduleHarvest(delay, opts);\n      }\n    }\n  }\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { windowAddEventListener } from '../event-listener/event-listener-opts';\nimport { globalScope, isWorkerScope, isBrowserScope } from '../constants/runtime';\nimport { subscribeToVisibilityChange } from '../window/page-visibility';\nif (isWorkerScope) {\n  globalScope.cleanupTasks = []; // create new list on WorkerGlobalScope to track funcs to run before exiting thread\n\n  const origClose = globalScope.close;\n  globalScope.close = () => {\n    // on worker's EoL signal, execute all \"listeners\", e.g. final harvests\n    for (let task of globalScope.cleanupTasks) {\n      task();\n    }\n    origClose();\n  };\n}\n\n/**\n * Subscribes a provided callback to the time/event when the agent should treat it as end-of-life.\n * This is used, for example, to submit a final harvest and send all remaining data on best-effort.\n * @param {function} cb - func to run before or during the last reliable event or time of an env's life span\n */\nexport function subscribeToEOL(cb) {\n  if (isBrowserScope) {\n    subscribeToVisibilityChange(cb, true); // when user switches tab or hides window, esp. mobile scenario\n    windowAddEventListener('pagehide', cb); // when user navigates away, and because safari iOS v14.4- doesn't fully support vis change\n    // --this ought to be removed once support for version below 14.5 phases out\n  } else if (isWorkerScope) {\n    globalScope.cleanupTasks.push(cb); // close() should run these tasks before quitting thread\n  }\n  // By default (for other env), this fn has no effect.\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { mapOwn } from '../../../common/util/map-own';\nimport { stringify } from '../../../common/util/stringify';\nimport { registerHandler as register } from '../../../common/event-emitter/register-handler';\nimport { HarvestScheduler } from '../../../common/harvest/harvest-scheduler';\nimport { cleanURL } from '../../../common/url/clean-url';\nimport { getConfigurationValue, getInfo, getRuntime } from '../../../common/config/config';\nimport { FEATURE_NAME } from '../constants';\nimport { isBrowserScope } from '../../../common/constants/runtime';\nimport { AggregateBase } from '../../utils/aggregate-base';\nexport class Aggregate extends AggregateBase {\n  static featureName = FEATURE_NAME;\n  constructor(agentIdentifier, aggregator) {\n    var _this;\n    super(agentIdentifier, aggregator, FEATURE_NAME);\n    _this = this;\n    this.eventsPerMinute = 240;\n    this.harvestTimeSeconds = getConfigurationValue(this.agentIdentifier, 'page_action.harvestTimeSeconds') || getConfigurationValue(this.agentIdentifier, 'ins.harvestTimeSeconds') || 30;\n    this.eventsPerHarvest = this.eventsPerMinute * this.harvestTimeSeconds / 60;\n    this.referrerUrl = undefined;\n    this.currentEvents = undefined;\n    this.events = [];\n    this.att = getInfo(this.agentIdentifier).jsAttributes; // per-agent, aggregators-shared info context\n\n    if (isBrowserScope && document.referrer) this.referrerUrl = cleanURL(document.referrer);\n    register('api-addPageAction', function () {\n      return _this.addPageAction(...arguments);\n    }, this.featureName, this.ee);\n    this.waitForFlags(['ins']).then(_ref => {\n      let [enabled] = _ref;\n      if (enabled) {\n        const scheduler = new HarvestScheduler('ins', {\n          onFinished: function () {\n            return _this.onHarvestFinished(...arguments);\n          }\n        }, this);\n        scheduler.harvest.on('ins', function () {\n          return _this.onHarvestStarted(...arguments);\n        });\n        scheduler.startTimer(this.harvestTimeSeconds, 0);\n      } else {\n        this.blocked = true;\n      }\n    });\n    this.drain();\n  }\n  onHarvestStarted(options) {\n    const {\n      userAttributes,\n      atts\n    } = getInfo(this.agentIdentifier);\n    var payload = {\n      qs: {\n        ua: userAttributes,\n        at: atts\n      },\n      body: {\n        ins: this.events\n      }\n    };\n    if (options.retry) {\n      this.currentEvents = this.events;\n    }\n    this.events = [];\n    return payload;\n  }\n  onHarvestFinished(result) {\n    if (result && result.sent && result.retry && this.currentEvents) {\n      this.events = this.events.concat(this.currentEvents);\n      this.currentEvents = null;\n    }\n  }\n\n  // WARNING: Insights times are in seconds. EXCEPT timestamp, which is in ms.\n  addPageAction(t, name, attributes) {\n    if (this.events.length >= this.eventsPerHarvest || this.blocked) return;\n    var width;\n    var height;\n    var eventAttributes = {};\n    if (isBrowserScope && window.document.documentElement) {\n      // Doesn't include the nav bar when it disappears in mobile safari\n      // https://github.com/jquery/jquery/blob/10399ddcf8a239acc27bdec9231b996b178224d3/src/dimensions.js#L23\n      width = window.document.documentElement.clientWidth;\n      height = window.document.documentElement.clientHeight;\n    }\n    var defaults = {\n      timestamp: t + getRuntime(this.agentIdentifier).offset,\n      timeSinceLoad: t / 1000,\n      browserWidth: width,\n      browserHeight: height,\n      referrerUrl: this.referrerUrl,\n      currentUrl: cleanURL('' + location),\n      pageUrl: cleanURL(getRuntime(this.agentIdentifier).origin),\n      eventType: 'PageAction'\n    };\n    mapOwn(defaults, set);\n    mapOwn(getInfo(this.agentIdentifier).jsAttributes, set);\n    if (attributes && typeof attributes === 'object') {\n      mapOwn(attributes, set);\n    }\n    eventAttributes.actionName = name || '';\n    this.events.push(eventAttributes);\n    function set(key, val) {\n      eventAttributes[key] = val && typeof val === 'object' ? stringify(val) : val;\n    }\n  }\n}"],"names":["HarvestScheduler","SharedContext","constructor","endpoint","opts","parent","_this$sharedContext","super","this","started","timeoutHandle","aborted","harvest","Harvest","sharedContext","subscribeToEOL","unload","bind","ee","on","SESSION_EVENTS","RESET","runHarvest","forceNoRetry","onUnload","startTimer","interval","initialDelay","scheduleHarvest","stopTimer","permanently","arguments","length","undefined","clearTimeout","delay","setTimeout","cbRanAfterSend","result","retry","onHarvestFinished","submitMethod","payload","harvests","getPayload","submitData","isFinalHarvest","Object","prototype","toString","call","push","send","args","sendX","raw","_send","forEach","cbFinished","customUrl","onFinished","sent","retryDelay","isWorkerScope","globalScope","cleanupTasks","origClose","close","task","cb","isBrowserScope","subscribeToVisibilityChange","windowAddEventListener","Aggregate","AggregateBase","agentIdentifier","aggregator","_this","FEATURE_NAME","eventsPerMinute","harvestTimeSeconds","getConfigurationValue","eventsPerHarvest","referrerUrl","currentEvents","events","att","getInfo","jsAttributes","document","referrer","cleanURL","register","addPageAction","featureName","waitForFlags","then","_ref","enabled","scheduler","onHarvestStarted","blocked","drain","options","userAttributes","atts","qs","ua","at","body","ins","concat","t","name","attributes","width","height","eventAttributes","window","documentElement","clientWidth","clientHeight","defaults","timestamp","getRuntime","offset","timeSinceLoad","browserWidth","browserHeight","currentUrl","location","pageUrl","origin","eventType","mapOwn","set","actionName","key","val","stringify","_defineProperty"],"sourceRoot":""}